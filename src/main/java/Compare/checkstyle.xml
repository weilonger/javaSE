<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- Generated by yanglei@changhong.com  2017-04-11-->
<!-- modified by liangmin@changhong.com  2017-07-21-->
<module name="Checker">

    <property name="charset" value="UTF-8" />
    <property name="severity" value="warning" />
    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks for Size Violations. -->
    <!-- 检查文件的长度（行） default max=2000 -->
    <module name="FileLength">
        <property name="max" value="2000" />
    </module>

    <module name="TreeWalker">
        <!--Checks that the outer type name and the file name match. For example, the class Foo must be in a file named Foo.java. -->
        <module name="OuterTypeFilename"/>
        <!--检查非法的分隔符的下个字符-->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <!--Restrict using Unicode escapes. It is possible to allow using escapes for non-printable(control) characters-->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!-- Checks for imports -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />
        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称 -->
        <module name="IllegalImport" /> <!-- defaults to sun.* packages -->
        <!-- 检查是否导入了不必显示导入的类 -->
        <module name="RedundantImport" />
        <!-- 检查是否导入的包没有使用 -->
        <module name="UnusedImports" />

        <!-- Checks for whitespace 编码规范3：
        代码行内的空格 像if、for、while 等关键字之后应留一个空格再跟左括号(，以突出关键字。
        -->
        <module name="EmptyForIteratorPad" />
        <module name="MethodParamPad" />
        <module name="NoWhitespaceAfter" />
        <module name="NoWhitespaceBefore" />
        <module name="OperatorWrap" />
        <module name="ParenPad" />
        <module name="TypecastParenPad" />
        <module name="WhitespaceAfter" />
        <!--Checks that a token is surrounded by whitespace-->
        <module name="WhitespaceAround" />
        <!--Checks that there is only one statement per line-->
        <module name="OneStatementPerLine"/>
        <!--Checks that each top-level class, interfaces or enum resides in a source file of its own.-->
        <module name="OneTopLevelClass"/>
        <!--Checks that chosen statements are not line-wrapped.-->
        <module name="NoLineWrap"/>
        <!-- 检查类和接口的javadoc 默认不检查author 和version tags
        authorFormat: 检查author标签的格式
        versionFormat: 检查version标签的格式
        scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
        excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
        tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
        <module name="JavadocType">
            <property name="authorFormat" value="\S"/>
            <property name="scope" value="protected"/>
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF"/>
            <property name="allowUnknownTags" value="true"/>
        </module>

        <!-- 检查方法的javadoc的注释
        scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
        allowMissingParamTags: 是否忽略对参数注释的检查
        allowMissingThrowsTags: 是否忽略对throws注释的检查
        allowMissingReturnTag: 是否忽略对return注释的检查 -->
        <module name="JavadocMethod">
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="tokens" value="METHOD_DEF"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>

            <!--允许get set 方法没有注释-->
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        <!--Check location of annotation on language elements-->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <!--Checks that the at-clause tag is followed by description-->
        <module name="NonEmptyAtclauseDescription"/>
        <!--Checks that Javadoc summary sentence does not contain phrases that are not recommended to use.-->
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <!--Checks Javadoc paragraphs-->
        <module name="JavadocParagraph"/>
        <!--Checks the order of at-clauses.-->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <!--Checks that a JavaDoc block which can fit on a single line and doesn't contain at-clauses-->
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
        <!--Controls the indentation between comments and surrounding code.-->
        <module name="CommentsIndentation"/>

        <!-- Checks for Naming Conventions. 命名规范  编码规范4：命名
        1) 使用完整的英文描述来命名
        2) 避免命名超长（15个字符以内比较好）
        3) 避免相似的命名，例如：textView 和textViews 不要一起使用
        4) 慎用缩写，如果要用到缩写，请用相对规范的缩写，如number 可以缩写成NO，但不要缩写成NB
        -->
        <!-- local, final variables, including catch parameters -->
        <module name="LocalFinalVariableName" />

        <!-- local, non-final variables, including catch parameters -->
        <module name="LocalVariableName" />

        <!-- static, non-final fields -->
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z0-9_]{0,32}$)" />
        </module>

        <!-- packages -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="包名 ''{0}''要匹配 ''{1}''的格式【所有字母全部小写】" />
        </module>

        <!-- classes and interfaces -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,32}$)" />
            <message key="name.invalidPattern" value="名字 ''{0}'' 要符合 ''{1}''的格式【建议每个单词的首字母大写】" />
        </module>
        <!-- methods -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,32}$)" />
            <message key="name.invalidPattern"
                     value="方法名 ''{0}'' 必须要满足 ''{1}''的格式，【建议除首单词外每个单词的首字母大写】" />
            <message key="method.name.equals.class.name" value="方法名 ''{0}'' 不能等于类名." />
        </module>
        <!-- parameters -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,32}$)" />
            <message key="name.invalidPattern" value="变量 ''{0}''要匹配''{1}''的格式，【建议除首单词外的每个单词的首字母大写】" />
        </module>
        <!--
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
             value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <!-- non-static fields -->
        <module name="MemberName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,32}$)" />
            <message key="name.invalidPattern" value="变量 ''{0}''要匹配''{1}''的格式，【大小写与类名相似，建议成员变量加前缀m】" />
        </module>
        <!-- constants (static, final fields) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,32}$)" />
            <message key="name.invalidPattern" value="常量 ''{0}'' 要匹配''{1}''的格式【字母全部大写可以包含_】" />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- 长度方面的检查 -->
        <!-- 每行不超过150字 -->
        <module name="LineLength">
            <property name="max" value="150" />
        </module>
        <!-- 方法不超过200行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF" />
            <property name="max" value="200" />
        </module>
        <!-- 方法的参数个数不超过7个。 且不检查构造方法 -->
        <module name="ParameterNumber">
            <property name="max" value="7" />
            <property name="tokens" value="METHOD_DEF" />
        </module>
        <!--Checks that no method having zero parameters is defined using the name finalize.-->
        <module name="NoFinalizer"/>
        <!--Checks that the whitespace around the Generic tokens < and > are correct to the typical convention.-->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>


        <!-- 关键字 -->
        <!-- 每个关键字都有正确的出现顺序。
        比如 public static final XXX 是对一个常量的声明。如果使用 static public final 就是错误的
        -->
        <module name="ModifierOrder" />
        <!-- 多余的关键字 -->
        <module name="RedundantModifier" />

        <!-- 对区域的检查 -->
        <!-- 不能出现空白区域 -->
        <module name="EmptyBlock" />
        <!-- 所有区域都要使用大括号 -->
        <module name="NeedBraces" />
        <!--Checks for blank line separators-->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <!--Checks line wrapping with separators-->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <!--
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            property name="tokens" value="METHOD_REF"/
            <property name="option" value="nl"/>
        </module>
        -->
        <!--Checks the placement of left curly braces on types, methods and other blocks-->
        <module name="LeftCurly">
            <property name="maxLineLength" value="100"/>
        </module>
        <!--Checks the placement of right curly braces-->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <!-- 多余的括号 -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true" />
        </module>

        <!-- 编码方面的检查 -->
        <!-- 不许出现空语句 -->
        <module name="EmptyStatement" />
        <!-- 不允许魔法数 -->
        <module name="MagicNumber">
            <property name="tokens" value="NUM_DOUBLE, NUM_INT" />
        </module>
        <!-- 多余的throw -->
        <!--module name="RedundantThrows" /-->
        <!-- 检查是否抛出了多余的异常 <module name="RedundantThrows"> <property name="logLoadErrors"
            value="true"/> <property name="suppressLoadErrors" value="true"/> </module> -->
        <!-- String的比较不能用!= 和 == -->
        <module name="StringLiteralEquality" />
        <!-- if最多嵌套3层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3" />
        </module>
        <!-- try最多被嵌套2层 -->
        <module name="NestedTryDepth">
            <property name="max" value="2" />
        </module>
        <!-- clone方法必须调用了super.clone() -->
        <module name="SuperClone" />
        <!-- finalize 必须调用了super.finalize() -->
        <module name="SuperFinalize" />
        <!-- 不能catch java.lang.Exception -->
        <module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.Exception" />
        </module>
        <!-- 确保一个类有package声明 -->
        <module name="PackageDeclaration" />
        <!-- 一个方法中最多有5个return -->
        <module name="ReturnCount">
            <property name="max" value="5" />
            <property name="format" value="^$" />
        </module>
        <!-- 根据 Sun 编码规范， class 或 interface 中的顺序如下： 1.class 声明。首先是 public, 然后是protected
            , 然后是 package level （不包括access modifier ） 最后是private . (多个class放在一个java文件中的情况）
            2.变量声明。 首先是 public, 然后是protected然后是 package level （不包括access modifier ） 最后是private
            . (多个class放在一个java文件中的情况） 3.构造函数 4.方法 -->
        <module name="DeclarationOrder" />
        <!-- 同一行不能有多个声明 -->
        <module name="MultipleVariableDeclarations" />
        <!-- 不必要的圆括号 -->
        <module name="UnnecessaryParentheses" />
        <!-- 杂项 -->
        <!-- 禁止使用System.out.println
        <module name="GenericIllegalRegexp">
            <property name="format" value="System\.out\.println" />
            <property name="ignoreComments" value="true" />
        </module>  -->
        <!-- 检查并确保所有的常量中的L都是大写的。因为小写的字母l跟数字1太象了 -->
        <module name="UpperEll" />
        <!-- Checks the style of array type definitions. Some like Java-style:
            public static void main(String[] args) and some like C-style: public static
            void main(String args[]) 检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格 -->
        <module name="ArrayTypeStyle">
        </module>
        <!-- 检查java代码的缩进 默认配置：基本缩进 4个空格，新行的大括号：0。新行的case 4个空格 -->
        <module name="Indentation" />
        <!--Checks the indentation of the continuation lines in at-clauses.-->
        <module name="JavadocTagContinuationIndentation"/>
        <!--The Check validate abbreviations(consecutive capital letters) length in identifier name, it also allow in enforce camel case naming.-->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>
        <!--Checks that overload methods are grouped together.-->
        <module name="OverloadMethodsDeclarationOrder"/>
        <!--Checks the distance between declaration of variable and its first usage-->
        <module name="VariableDeclarationUsageDistance"/>
        <!--Checks that the groups of import declarations appear in the order specified by the user.-->
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
        </module>
        <!--检查boolean值是否冗余的地方 -->
        <module name="SimplifyBooleanExpression" />
        <!--检查是否存在过度复杂的boolean返回值 -->
        <module name="SimplifyBooleanReturn" />
        <!--只有私有构造器的类必须声明为final -->
        <module name="FinalClass" />
        <!--检查class成员属性可见性。只有static final 修饰的成员是可以public的。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true.
            Public members are not flagged if the name matches the public member regular
            expression (contains "^serialVersionUID$" by default). Note: Checkstyle 2
            used to include "^f[A-Z][a-zA-Z0-9]*$" in the default pattern to allow CMP
            for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary
            to have public access for persistent fields, hence the default has been changed.
            Rationale: Enforce encapsulation. 强制封装 -->
        <module name="VisibilityModifier" />
        <!-- 检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。 -->
        <module name="TodoComment" />
        <!-- 检查switch语句是否有‘default’从句 -->
        <module name="MissingSwitchDefault" />
        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough" />
        <!--Checks for empty catch blocks with few options to skip violation.-->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
    </module>
</module>